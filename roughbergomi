import numpy as np
from scipy.special import gamma

def autocovariance(t, s, H, nu):
    return nu**2 * (t**(2*H) + s**(2*H) - np.abs(t-s)**(2*H))

def E_ZtZs(t, s, H):
    return s**(2*H) * t**(2*H-2) * gamma(2*H-1) * gamma(H)**2 / gamma(2*H) * (s+t)**(-2*H)

def fair_value_variance_swap(S0, r, sigma0, H, nu, t, T, n, seed=None):
    np.random.seed(seed)
    
    # Calculate parameters
    dt = T / n
    df = np.exp(-r * dt)
    v = np.zeros(n)
    v[0] = sigma0**2
    
    # Generate antithetic Brownian paths
    dB = np.sqrt(dt) * np.random.normal(size=(2, n-1))
    dB[1, :] = -dB[0, :]
    
    for i in range(1, n):
        dW = np.sqrt(2*H) * np.sqrt(v[i-1]) * (dB[:, i-1] @ np.array([1, -1]))
        v[i] = v[i-1] * np.exp(-2*H*nu**2*dt) + nu**2 * (1-np.exp(-2*H*nu**2*dt)) * S0**(2*H) * np.exp(v[i-1]*dt) * dW**2
    
    # Calculate integrals using antithetic variables
    VS = 0.0
    for i in range(n-1):
        Z = np.random.normal()
        VS += (E_ZtZs((i+1)*dt, T, H) + E_ZtZs(i*dt, T, H)) / 2 * autocovariance(i*dt, (i+1)*dt, H, nu) * (Z**2 + (-Z)**2) / 2
        
    VS = S0**(2*H) * VS / n
    
    # Calculate fair value of variance swap
    K = np.arange(1, n+1) * dt
    fair_value = 2 * np.sum(df**(T-K) * K * VS) / (T - t) / (n*dt)
    
    return fair_value

def fair_value_volatility_swap(S0, r, sigma0, H, nu, t, T, n, seed=None):
    np.random.seed(seed)
    
    # Calculate parameters
    dt = T / n
    df = np.exp(-r * dt)
    v = np.zeros(n)
    v[0] = sigma0**2
    
    # Generate antithetic Brownian paths
    dB = np.sqrt(dt) * np.random.normal(size=(2, n-1))
    dB[1, :] = -dB[0, :]
    
    for i in range(1, n):
        dW = np.sqrt(2*H) * np.sqrt(v[i-1]) * (dB[:, i-1] @ np.array([1, -1]))
        v[i] = v[i-1] * np.exp(-2*H*nu**2*dt) + nu**2 * (1-np.exp(-2*H*nu**2*dt)) * S0**(2*H) * np.exp(v[i-1]*dt) * dW**2
    
        # Calculate integrals using antithetic variables
    VS = 0.0
    for i in range(n-1):
        Z = np.random.normal()
        VS += (E_ZtZs((i+1)*dt, T, H) + E_ZtZs(i*dt, T, H)) / 2 * autocovariance(i*dt, (i+1)*dt, H, nu) * (Z**2 + (-Z)**2) / 2
        
    VS = S0**(2*H) * VS / n
    
    # Calculate fair value of variance swap
    K = np.arange(1, n+1) * dt
    fair_value = 2 * np.sum(df**(T-K) * K * VS) / (T - t) / (n*dt)
    
    return fair_value

def fair_value_volatility_swap(S0, r, sigma0, H, nu, t, T, n, seed=None):
    np.random.seed(seed)
    
    # Calculate parameters
    dt = T / n
    df = np.exp(-r * dt)
    v = np.zeros(n)
    v[0] = sigma0**2
    
    # Generate antithetic Brownian paths
    dB = np.sqrt(dt) * np.random.normal(size=(2, n-1))
    dB[1, :] = -dB[0, :]
    
    for i in range(1, n):
        dW = np.sqrt(2*H) * np.sqrt(v[i-1]) * (dB[:, i-1] @ np.array([1, -1]))
        v[i] = v[i-1] * np.exp(-2*H*nu**2*dt) + nu**2 * (1-np.exp(-2*H*nu**2*dt)) * S0**(2*H) * np.exp(v[i-1]*dt) * dW**2
        
    # Calculate integrals using antithetic variables
    IV = 0.0
    for i in range(n-1):
        Z = np.random.normal()
        IV += (E_ZtZs((i+1)*dt, T, H) + E_ZtZs(i*dt, T, H)) / 2 * autocovariance(i*dt, (i+1)*dt, H, nu) * (Z**2 + (-Z)**2) / 2
        
    IV = IV / n
    
    # Calculate fair value of volatility swap
    K = np.arange(1, n+1) * dt
    fair_value = 2 * np.sum(df**(T-K) * K * IV) / (T - t) / (n*dt)
    
    return fair_value

